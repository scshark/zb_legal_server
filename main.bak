package main

import (
	"gopkg.in/gographics/imagick.v2/imagick"
	"log"
	"fmt"
)

// @title Swagger Example API
// @version 0.0.1
// @description This is a sample Server pets
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name x-token
// @BasePath /
func main() {



	pdfName := "result.pdf"
	imageName := "ss_1.jpg"

	if err := ConvertPdfToJpg(pdfName, imageName); err != nil {
		fmt.Println(err)
		log.Fatal(err)
	}

	return
	//
	// filename := "result.pdf"
	// file, err := os.Open(filename)
	// if err != nil {
	// 	log.Fatalf("Could not open input file: %v\n", err)
	// }
	// defer file.Close()
	//
	// reader, err := model.NewPdfReader(file)
	// if err != nil {
	// 	log.Fatalf("Could not create reader: %v\n", err)
	// }
	//
	//
	// // Get total number of pages.
	// numPages, err := reader.GetNumPages()
	// if err != nil {
	// 	log.Fatalf("Could not retrieve number of pages: %v\n", err)
	// }
	//
	// // Render pages.
	// // basename := strings.TrimSuffix(filepath.Base(filename), filepath.Ext(filename))
	//
	// device := render.NewImageDevice()
	// for i := 1; i <= numPages; i++ {
	// 	// Get page.
	// 	page, err := reader.GetPage(i)
	// 	if err != nil {
	// 		log.Fatalf("Could not retrieve page: %v\n", err)
	// 	}
	//
	// 	// Render page to PNG file.
	// 	// RenderToPath chooses the image format by looking at the extension
	// 	// of the specified filename. Only PNG and JPEG files are supported
	// 	// currently.
	// 	outFilename := filepath.Join("./", fmt.Sprintf("%s_%d.png", "ss", i))
	// 	if err = device.RenderToPath(page, outFilename); err != nil {
	// 		log.Fatalf("Image rendering error: %v\n", err)
	// 	}

		// Alternatively, an image.Image instance can be obtained by using
		// the Render method of the image device, which can then be encoded
		// and saved in any format.
		// image, err := device.Render(page)
	// }

	// res, err := docconv.ConvertPath("./docs/b.docx")
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// fmt.Println(res)
	//
	// pdf := gofpdf.New("P", "mm", "A4", "")
	// pdf.AddPage()
	// pdf.SetFont("Helvetica", "B", 16)
	// pdf.Cell(40, 10, res.Body)
	// pdfErr := pdf.OutputFileAndClose("hello.pdf")
	// fmt.Println(pdfErr)

	// c := &gotenberg.Client{Hostname: "http://localhost:3000"}
	// doc, _ := gotenberg.NewDocumentFromPath("a.docx", "./docs/a.docx")
	//
	// // doc2, _ := gotenberg.NewDocumentFromPath("b.docx", "./docs/")
	// req := gotenberg.NewOfficeRequest(doc)
	// dest := "result.pdf"
	// pdfErr := c.Store(req, dest)
	// if pdfErr == nil {
	// 	fmt.Println("success")
	// }else{
	// 	fmt.Println("office err")
	// 	fmt.Println(pdfErr)
	// }



	// switch global.GVA_CONFIG.System.DbType {
	// case "mysql":
	// 	initialize.Mysql()
	// // case "sqlite":
	// //	initialize.Sqlite()  // sqlite需要gcc支持 windows用户需要自行安装gcc 如需使用打开注释即可
	// default:
	// 	initialize.Mysql()
	// }
	// initialize.DBTables()
	// // 程序结束前关闭数据库链接
	// defer global.GVA_DB.Close()
	//
	// core.RunWindowsServer()
}

// ConvertPdfToJpg will take a filename of a pdf file and convert the file into an
// image which will be saved back to the same location. It will save the image as a
// high resolution jpg file with minimal compression.
func ConvertPdfToJpg(pdfName string, imageName string) error {

	// Setup
	imagick.Initialize()
	defer imagick.Terminate()

	mw := imagick.NewMagickWand()
	defer mw.Destroy()

	// Must be *before* ReadImageFile
	// Make sure our image is high quality
	if err := mw.SetResolution(300, 300); err != nil {
		return err
	}

	// Load the image file into imagick
	if err := mw.ReadImage(pdfName); err != nil {
		return err
	}

	// Must be *after* ReadImageFileimagick.ALPHA_CHANNEL_FLATTEN
	// Flatten image and remove alpha channel, to prevent alpha turning black in jpg
	// if err := mw.SetImageAlphaChannel(imagick.ALP); err != nil {
	// 	return err
	// }

	// Set any compression (100 = max quality)
	if err := mw.SetCompressionQuality(95); err != nil {
		return err
	}


	// Select only first page of pdf
	mw.SetIteratorIndex(0)

	// Convert into JPG
	if err := mw.SetFormat("jpg"); err != nil {
		return err
	}

	// Save File
	return mw.WriteImage(imageName)
}
